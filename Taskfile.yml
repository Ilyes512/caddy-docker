version: "2"

########################################################################################################################
#
# TOC
#
########################################################################################################################
#
# 1. BUILD
# 2. RUN
# 3. MISC
#
########################################################################################################################

tasks:
  ######################################################################################################################
  #
  #  1. BUILD
  #
  ######################################################################################################################

  d:build:scratch:
    desc: Build a Caddy scratch-based Docker image
    cmds:
      - task: d:build
        vars:
          TYPE: scratch
          TAG_VERSION: '{{.TAG_VERSION | default "latest"}}'

  d:build:alpine:
    desc: Build a Caddy Alpine-based Docker image
    cmds:
      - task: d:build
        vars:
          TYPE: alpine
          TAG_VERSION: '{{.TAG_VERSION | default "latest"}}'

  d:build:
    silent: true
    deps:
      - d:tmpl:compile
      - task: d:lint
        vars:
          DOCKERFILE: build/Dockerfile.{{.TYPE}}
    preconditions:
      - sh: test '{{.TYPE}}' != '<no value>'
        msg: TYPE needs to contain the Docker type [alpine, scratch]
      - sh: test '{{.TAG_VERSION}}' != '<no value>'
        msg: TAG_VERSION needs to contain the tag that will be assigned to the Docker build
    cmds:
      - docker build
        --tag {{.TAG_REPOSITORY}}/{{.TAG_NAME}}:{{.TYPE}}-{{.TAG_VERSION}}
        --file build/Dockerfile.{{.TYPE}}
        --build-arg CADDY_SOURCE_VERSION={{.CADDY_SOURCE_VERSION}}
        --build-arg GO_TAG_VERSION={{.GO_TAG_VERSION}}
        --build-arg ALPINE_TAG_VERSION="{{.ALPINE_TAG_VERSION}}"
        .

  d:tmpl:compile:
    desc: Compile the (Gomplate) templates into Dockerfiles
    silent: true
    cmds:
      - docker run
        --interactive
        --tty
        --rm
        --volume $(pwd)/build:/build
        --workdir /build
        hairyhenderson/gomplate:latest
        --template partials='templates/partials/'
        --input-dir templates/
        --output-map '{{`{{ .in | strings.TrimSuffix ".tmpl" }}`}}'

  d:lint:
    desc: Apply a Dockerfile linter (https://github.com/hadolint/hadolint)
    silent: true
    preconditions:
      - sh: test '{{.DOCKERFILE}}' != '<no value>'
        msg: DOCKERFILE needs to contain a path to a Dockerfile
    cmds:
      - docker run
        --interactive
        --rm
        hadolint/hadolint:{{.HADOLINT_TAG_VERSION}}
        < {{.DOCKERFILE}}

  ######################################################################################################################
  #
  #  2. RUN
  #
  ######################################################################################################################

  d:run:scratch:
    desc: Build and run the Caddy scratch-based Docker image
    cmds:
      - task: d:run
        vars:
          TYPE: alpine
          TAG_VERSION: '{{.TAG_VERSION | default "latest"}}'

  d:run:alpine:
    desc: Build and run the Caddy alpine-based Docker image
    cmds:
      - task: d:run
        vars:
          TYPE: alpine
          TAG_VERSION: '{{.TAG_VERSION | default "latest"}}'

  d:run:
    silent: true
    preconditions:
      - sh: test '{{.TYPE}}' != '<no value>'
        msg: TYPE needs to contain a value ie 'scratch' or 'alpine'
      - sh: test '{{.TAG_VERSION}}' != '<no value>'
        msg: TAG_VERSION needs to contain the image tag that will be run
    cmds:
      - task: d:build:{{.TYPE}}
        vars:
          TAG_VERSION: "{{.TAG_VERSION}}"
      - docker run
        --interactive
        --tty
        --rm
        --publish 8080:8080
        {{.TAG_REPOSITORY}}/{{.TAG_NAME}}:{{.TYPE}}-{{.TAG_VERSION}}

  ######################################################################################################################
  #
  #  3. MISC
  #
  ######################################################################################################################

  fetch-dist-assets:
    desc: Fetch the latest default welcome page and default Caddy config
    silent: true
    env:
      CADDYFILE_PATH: /etc/caddy/Caddyfile
      WELCOMEFILE_PATH: /usr/share/caddy/index.html
    cmds:
      - mkdir -p build/files/`dirname $CADDYFILE_PATH`
      - mkdir -p build/files/`dirname $WELCOMEFILE_PATH`
      - |
        CADDYTEMPDIR=`mktemp -d ${TMP:-/tmp/}caddyassets.XXXXXX`
        git clone https://github.com/caddyserver/dist --depth=1 $CADDYTEMPDIR

        cat $CADDYTEMPDIR/config/Caddyfile \
          | docker run --interactive --rm hairyhenderson/sed -r 's/^(.*)(localhost.*):8080(.*)/\1\2:8888\3/g' \
          | docker run --interactive --rm hairyhenderson/sed 's/^:80$/:8080/g' \
          > $CADDYTEMPDIR/config/Caddyfile2

        mv $CADDYTEMPDIR/config/Caddyfile2 build/files$CADDYFILE_PATH
        mv $CADDYTEMPDIR/welcome/index.html build/files$WELCOMEFILE_PATH
        rm -rf $CADDYTEMPDIR
